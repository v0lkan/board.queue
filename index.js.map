{"version":3,"sources":["index.es6"],"names":[],"mappings":"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","file":"index.js","sourcesContent":["'use strict';\n\n/*\n *  ______                     _________\n *  ___  /_____________ _____________  /\n *  __  __ \\  __ \\  __ `/_  ___/  __  /\n *  _  /_/ / /_/ / /_/ /_  /   / /_/ /\n *  /_.___/\\____/\\__,_/ /_/    \\__,_/\n *      a minimalist dashboard and monitoring solution.\n *\n * This program is distributed under the terms of the MIT license.\n * Please see `LICENSE.md` file for details.\n *\n * Send your comments and suggestions toâ€¦\n * <https://github.com/v0lkan/board/issues>\n */\n\nimport zmq from 'zmq';\nimport log from 'board.log';\n\n// TODO: some of these should be passed to the constructor.\nconst TCP_ENDPOINT = 'tcp://127.0.0.1';\nconst PORT = 4243;\nconst TRANSPORT = 'dashboard-transport';\nconst URL = `${TCP_ENDPOINT}:${PORT}`;\n\nlet createPullSocket = (messageHandler) => {\n    let sock = null;\n\n    let handler = (data) => {\n        messageHandler(data);\n    };\n\n    let disconnect = () => {\n        if (!sock) {return;}\n\n        sock.removeAllListeners();\n        sock.unbind();\n        sock = null;\n    };\n\n    let connect = () => {\n        sock = zmq.socket('sub');\n\n        if (!sock) {return;}\n\n        sock.bind(URL, (err) => {\n            if (err) {sock = null;}\n\n            sock.subscribe(TRANSPORT);\n        });\n    };\n\n    let listen = () => {\n        if (!sock) {return;}\n\n        sock.on('error', (err) => {void err;});\n        sock.on('message', (topic, message) => {handler(message);});\n    };\n\n    connect();\n    listen();\n\n    log(`Board:: Message bus [PULL] socket connected to port ${PORT}.`);\n\n    return {\n        disconnect: () => disconnect(),\n        connect: () => {\n            connect();\n            listen();\n        }\n    };\n};\n\nlet createPushSocket = () => {\n    let sock = null;\n\n    let connect = () => {\n        sock = zmq.socket('pub');\n\n        if (!sock) {return;}\n\n        sock.connect(URL, (err) => {\n            if (err) {\n                sock = null;\n            }\n        });\n    };\n\n    let disconnect = () => {\n        sock.removeAllListeners();\n        sock.disconnect();\n        sock = null;\n    };\n\n    let listen = () => {\n        sock.on('error', (err) => {void err;});\n    };\n\n    connect();\n    listen();\n\n    log(`Board:: Message bus [PUSH] socket connected to port ${PORT}.`);\n\n    return {\n        send: (data) => {\n            if (!sock) {return;}\n\n            sock.send([TRANSPORT, JSON.stringify(data)]);\n        },\n        connect: () => {\n            connect();\n            listen();\n        },\n        disconnect: () => {\n            disconnect();\n        }\n    };\n};\n\nexport {createPullSocket, createPushSocket};\n"]}